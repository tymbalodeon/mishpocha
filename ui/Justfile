!include ../helpers.just

set fallback

dev_port := "5173"
prod_port := "3000"
image := "mishpocha-ui"

_help *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        {{just}} --list
    else
        {{just}} --list --list-heading $'\nUI: [`{{just}} ui <COMMAND>`]\n'
    fi

# Install dependencies.
install *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        ../install_dependencies.sh --ui
    fi
    pnpm install

# Update dependencies.
update *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        ../install_dependencies.sh --ui --update
    fi
    pnpm update

# Check code for errors.
check:
    pnpm lint --fix

# Format code.
@format:
    pnpm run format

# Add dependencies.
@add *packages:
    pnpm add {{packages}}

# Add dependencies to "dev" group.
@add-dev *packages:
    pnpm add --save-dev {{packages}}

# Remove dependencies.
@remove *packages:
    pnpm remove {{packages}}

# Remove dependencies from "dev" group.
@remove-dev *packages:
    pnpm remove --save-dev {{packages}}

# List dependencies.
@list:
    pnpm list

_get_instance *instance:
    #!/usr/bin/env zsh
    {{get_instance}}

_build *prod:
    #!/usr/bin/env zsh
    if pgrep -q docker; then
        target="{{ if prod =~ "--prod" { "prod" } else { "dev" } }}"
        docker build --target "${target}" --tag {{image}} .
    fi

# Run the Docker container, optionally in "--prod", and optionally "--open" in the browser.
start *args: stop (_build args)
    #!/usr/bin/env zsh
    if [[ "{{args}}" = *"--docker"* ]]; then
        instance="--docker"
    elif [[ "{{args}}" = *"--local"* ]]; then
        instance="local"
    else
        instance=""
    fi
    instance="$({{just}} _get_instance ${instance})"
    {{ if args =~ "--open" { just + " open" } else { "" } }}
    if [ "${instance}" = "docker" ]; then
        if [ -z "$({{just}} running)" ]; then
            {{check_if_docker_running}}
        fi
        if [[ "{{args}}" = *"--prod"* ]]; then
            docker run \
                --detach \
                --name {{image}} \
                --publish {{prod_port}}:{{prod_port}} \
                --rm \
                {{image}}
            {{ if args =~ "--open" { "{{just}} open --prod" } else { "" } }}
        else
            docker run \
                --detach \
                --name {{image}} \
                --publish {{dev_port}}:{{dev_port}} \
                --rm \
                --volume "$(pwd)"/src:/ui/src \
                {{image}}
            {{ if args =~ "--open" { "{{just}} open" } else { "" } }}
        fi
    else
        pnpm {{ if args == "--open" { "start" } else { "dev" } }}
    fi

# Stop the server.
stop:
    #!/usr/bin/env zsh
    if [ -n "$({{just}} running)" ]; then
        docker kill {{image}}
    fi

# Remove the Docker image.
[no-exit-message]
@clean:
    docker rmi {{image}} >/dev/null 2>&1

# Show the container id (or all info with "--verbose") if the container is running.
running *verbose:
    #!/usr/bin/env zsh
    if pgrep -q docker; then
        docker container ls \
            {{ if verbose =~ "--verbose" { "" } else { "--quiet" } }} \
            --filter name={{image}}
    fi

# Show the Docker logs up to <lines> lines.
logs tail="20":
    #!/usr/bin/env zsh
    if [ -n "$({{just}} running)" ]; then
        docker logs {{image}} --tail {{tail}}
    fi

# Log into the interactive shell in Docker.
shell:
    #!/usr/bin/env zsh
    {{check_if_docker_running}}
    if [ -n "$({{just}} running)" ]; then
        {{just}} start
    fi
    docker exec --interactive --tty {{image}} bash

# Open the application in the browser.
open *prod:
    #!/usr/bin/env zsh
    port={{ if prod == "--prod" { prod_port } else { dev_port } }}
    open "http://localhost:${port}/"
