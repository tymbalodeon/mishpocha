!include helpers.just

set fallback

port := "5656"
data := "db-config"

_help *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        {{just}} --list
    else
        {{just}} --list --list-heading $'\nDB: [`{{just}} db <COMMAND>`]\n'
    fi

# Install dependencies.
@install:
    ../install_dependencies.sh --db

@_error_docker_not_running:
    echo "Docker not running. Please start Docker and try again"

_get_instance *instance:
    #!/usr/bin/env zsh
    if [ -n "$(pgrep docker -q)" ] && [ -z "{{instance}}" ] \
        || [[ "{{instance}}" = *"--docker"* ]]; then
        echo "docker"
    else
        echo "local"
    fi

_create:
    #!/usr/bin/env zsh
    if ! edgedb instance list | grep -q {{edgedb_instance}}; then
        edgedb instance create {{edgedb_instance}}
        {{edgedb_command}} migrate
    fi

# Migrate the (local) database.
migrate: _create
    #!/usr/bin/env zsh
    {{edgedb_command}} migration create
    {{edgedb_command}} migrate

_build:
    #!/usr/bin/env zsh
    if ! pgrep -q docker; then
        exit
    fi
    docker build --tag {{image}} .

# Remove the Docker image.
[no-exit-message]
clean:
    #!/usr/bin/env zsh
    docker rmi {{image}} >/dev/null 2>&1

# Drop the persisted databases (optional: "--docker", or "--local").
drop *args: stop
    #!/usr/bin/env zsh
    if [ "{{args}}" = "--local" ] || [ -z "{{args}}" ]; then
        edgedb instance destroy \
            --instance {{edgedb_instance}} \
            --force \
            >/dev/null 2>&1
    fi
    if [ "{{args}}" = "--docker" ] || [ -z "{{args}}" ]; then
        {{check_if_docker_running}}
        volumes=("$(docker volume list --quiet --filter name={{data}})")
        if [ -n "${volumes}" ]; then
            for volume in "${volumes}"; do
                docker volume remove "${volume}"
            done
        fi
    fi

# Start the Docker container.
start *open: stop _build
    #!/usr/bin/env zsh
    {{check_if_docker_running}}
    docker run \
        --detach \
        --env EDGEDB_SERVER_SECURITY=insecure_dev_mode \
        --env EDGEDB_SERVER_ADMIN_UI=enabled \
        --name {{image}} \
        --publish {{port}}:{{port}} \
        --rm \
        --volume {{data}}:/var/lib/edgedb/data \
        {{image}}
    docker run \
        --interactive \
        --link {{image}} \
        --rm \
        --tty \
        --volume {{config}}:/.config/edgedb \
        edgedb/edgedb-cli \
            --host {{image}} \
            instance link {{edgedb_instance}} \
                --non-interactive \
                --trust-tls-cert \
                --overwrite
    {{ if open =~ "--open" { "{{just}} ui --docker" } else { "" } }}

# Stop the Docker container.
stop:
    #!/usr/bin/env zsh
    if [ -n "$({{just}} running)" ]; then
        docker kill {{image}}
        if docker volume list | grep -q {{config}}; then
            docker volume remove {{config}}
        fi
    fi

# Show if the container is running.
running *verbose:
    #!/usr/bin/env zsh
    if pgrep -q docker; then
        docker container ls \
            {{ if verbose =~ "--verbose" { "" } else { "--quiet" } }} \
            --filter name={{image}}
    fi

# Show the Docker logs.
logs tail="20":
    #!/usr/bin/env zsh
    if [ -n "$({{just}} running)" ]; then
        docker logs {{image}} --tail {{tail}}
    fi

# Show the DSN for the database (optional: "--docker" or "--local").
dsn *instance:
    #!/usr/bin/env zsh
    instance="$({{just}} _get_instance {{instance}})"
    if [ "${instance}" = "docker" ]; then
        if [ -z "$({{just}} running)" ]; then
            {{check_if_docker_running}}
        fi
        base_dsn=$(
            docker run \
                --interactive \
                --link {{image}} \
                --rm \
                --tty \
                --volume {{config}}:/.config/edgedb \
                edgedb/edgedb-cli \
                    --instance {{edgedb_instance}} \
                    instance credentials \
                        --insecure-dsn
        )
        base_dsn=$(
            sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'<<<"${base_dsn}"
        )
    else
        base_dsn=$({{connect_to_edgedb}} instance credentials --insecure-dsn)
    fi
    echo "${base_dsn}&tls_security=insecure"

# Open the edgedb shell (optional: "--docker" or "--local").
shell *instance:
    #!/usr/bin/env zsh
    instance="$({{just}} _get_instance {{instance}})"
    if [ "${instance}" = "docker" ]; then
        {{check_if_docker_running}}
        if [ -z "$({{just}} running)" ]; then
            {{just}} start
        fi
        docker run \
            --interactive \
            --link {{image}} \
            --rm \
            --tty \
            --volume {{config}}:/.config/edgedb \
            edgedb/edgedb-cli \
                --instance {{edgedb_instance}}
    else
        {{connect_to_edgedb}}
    fi

# Open the Edgedb UI (optional: "--docker" or "--local")
ui *instance:
    #!/usr/bin/env zsh
    instance="$({{just}} _get_instance {{instance}})"
    if [ "${instance}" = "docker" ]; then
        {{check_if_docker_running}}
        open "http://localhost:{{port}}/ui"
    else
        {{connect_to_edgedb}} ui
    fi

# Seed the database.
seed *instance:
    #!/usr/bin/env zsh
    instance="$({{just}} _get_instance {{instance}})"
    if [ "${instance}" = "docker" ]; then
        {{check_if_docker_running}}
        if [ -z "$({{just}} running)" ]; then
            {{just}} start
        fi
        docker run \
            --interactive \
            --link {{image}} \
            --rm \
            --tty \
            --volume {{config}}:/.config/edgedb \
            --volume ./seed.edgeql:/seed.edgeql \
            edgedb/edgedb-cli \
                --instance {{edgedb_instance}} \
                query --file seed.edgeql
    else
        {{connect_to_edgedb}} query --file seed.edgeql
    fi

# Show available queries, or <query> the database.
@query *query:
    {{just}} --justfile queries.just {{query}}
