set fallback

image := "mishpocha-db"
edgedb_instance := replace(image, "-", "_")
edgedb_command := "edgedb --instance " + edgedb_instance
port := "5656"
data := "db-config"
config := "edgedb-config"
check_if_docker_running := "
if ! pgrep docker -q &>/dev/null; then
    just _error_docker_not_running
    exit
fi
"
bat := "bat --style plain --language json --theme gruvbox-dark"
jq := "jq | " + bat

_help *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        just --list
    else
        just --list --list-heading $'\nDB: [`just db <COMMAND>`]\n'
    fi

# Install dependencies.
@install:
    ../install_dependencies.sh --db

@_error_docker_not_running:
    echo "Docker not running. Please start Docker and try again"

_get_instance *instance:
    #!/usr/bin/env zsh
    if [ -n "$(just running)" ] && [ -z "{{instance}}"] \
        || [[ "{{instance}}" = *"--docker"* ]]; then
        printf "docker"
    else
        printf "local"
    fi

_create:
    #!/usr/bin/env zsh
    if ! edgedb instance list | grep -q {{edgedb_instance}}; then
        edgedb instance create {{edgedb_instance}}
        {{edgedb_command}} migrate
    fi

# Migrate the (local) database.
migrate: _create
    #!/usr/bin/env zsh
    {{edgedb_command}} migration create
    {{edgedb_command}} migrate

_build:
    #!/usr/bin/env zsh
    if ! pgrep -q docker; then
        exit
    fi
    docker build --tag {{image}} .

_link:
    #!/usr/bin/env zsh
    if ! pgrep -q docker; then
        exit
    fi
    docker run \
        --interactive \
        --link {{image}} \
        --rm \
        --tty \
        --volume {{config}}:/.config/edgedb \
        edgedb/edgedb-cli \
            --host {{image}} \
            instance link {{edgedb_instance}} \
                --non-interactive \
                --trust-tls-cert \
                --overwrite

# Start the Docker container.
start *open: stop _build && _link
    #!/usr/bin/env zsh
    {{check_if_docker_running}}
    docker run \
        --detach \
        --env EDGEDB_SERVER_SECURITY=insecure_dev_mode \
        --env EDGEDB_SERVER_ADMIN_UI=enabled \
        --name {{image}} \
        --publish {{port}}:{{port}} \
        --rm \
        --volume {{data}}:/var/lib/edgedb/data \
        {{image}}
    {{ if open =~ "--open" { "just ui --docker" } else { "" } }}

# Stop the Docker container.
stop:
    #!/usr/bin/env zsh
    if [ -n "$(just running)" ]; then
        docker kill {{image}}
        if docker volume list | grep -q {{config}}; then
            docker volume remove {{config}}
        fi
    fi

# Show if the container is running.
running *verbose:
    #!/usr/bin/env zsh
    if pgrep -q docker; then
        docker container ls \
            {{ if verbose =~ "--verbose" { "" } else { "--quiet" } }} \
            --filter name={{image}}
    fi

# Show the Docker logs.
logs tail="20":
    #!/usr/bin/env zsh
    if [ -n "$(just running)" ]; then
        docker logs {{image}} --tail {{tail}}
    fi

# Remove the Docker image.
clean:
    #!/usr/bin/env zsh
    docker rmi {{image}} >/dev/null 2>&1
    exit 0

# Show the DSN for the database (optional: "--docker" or "--local").
dsn *instance:
    #!/usr/bin/env zsh
    instance="$(just _get_instance {{instance}})"
    if [ "${instance}" = "docker" ]; then
        if [ -z "$(just running)" ]; then
            {{check_if_docker_running}}
        fi
        base_dsn=$(
            docker run \
                --interactive \
                --link {{image}} \
                --rm \
                --tty \
                --volume {{config}}:/.config/edgedb \
                edgedb/edgedb-cli \
                    --instance {{edgedb_instance}} \
                    instance credentials \
                        --insecure-dsn
        )
        base_dsn=$(
            sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'<<<"${base_dsn}"
        )
    else
        just _create
        base_dsn=$({{edgedb_command}} instance credentials --insecure-dsn)
    fi
    echo "${base_dsn}&tls_security=insecure"

# Open the edgedb shell (optional: "--docker" or "--local").
shell *instance:
    #!/usr/bin/env zsh
    instance="$(just _get_instance {{instance}})"
    if [ "${instance}" = "docker" ]; then
        {{check_if_docker_running}}
        just start
        docker run \
            --interactive \
            --link {{image}} \
            --rm \
            --tty \
            --volume {{config}}:/.config/edgedb \
            edgedb/edgedb-cli \
                --instance {{edgedb_instance}}
    else
        just _create
        {{edgedb_command}}
    fi

# Open the Edgedb UI (optional: "--docker" or "--local")
ui *instance:
    #!/usr/bin/env zsh
    instance="$(just _get_instance {{instance}})"
    if [ "${instance}" = "docker" ]; then
        {{check_if_docker_running}}
        open "http://localhost:{{port}}/ui"
    else
        just _create
        {{edgedb_command}} ui
    fi

# Drop the persisted databases or only in "--docker", or "--local".
drop *args: stop
    #!/usr/bin/env zsh
    if [ "{{args}}" = "--local" ] || [ -z "{{args}}" ]; then
        edgedb instance destroy \
            --instance {{edgedb_instance}} \
            --force \
            >/dev/null 2>&1
    fi
    if [ "{{args}}" = "--docker" ] || [ -z "{{args}}" ]; then
        if ! pgrep -q docker; then
            just _error_docker_not_running
            exit
        fi
        volumes=("$(docker volume list --quiet --filter name={{data}})")
        if [ -n "${volumes}" ]; then
            for volume in "${volumes}"; do
                docker volume remove "${volume}"
            done
        fi
    fi

# Seed the database.
@seed:
    {{edgedb_command}} query --file seed.edgeql

# Delete all objects in the database.
@delete:
    {{edgedb_command}} query \
        "delete Album; \
        delete Disc; \
        delete Track; \
        delete Player; \
        delete Artist; \
        delete Person; \
        delete Composition; \
        delete Label; \
        delete Date; \
        delete Instrument;" \
        | {{jq}}

select_date := "\
select Date { \
    local_date, \
    birthdays := .births.full_name \
}"

# View dates in the database.
@dates:
    {{edgedb_command}} query "{{select_date}}" | {{jq}}

# View a date in the database.
@date display:
    {{edgedb_command}} query \
        "{{select_date}} filter .display ilike '%{{display}}%'" \
        | {{jq}}

select_person := "\
select Person { \
    full_name, \
    birthday := .birth_date.local_date, \
    age, \
    is_alive, \
    person_instruments := .instruments.name, \
    person_groups := .groups.name, \
    person_compositions := .compositions.title, \
    person_tracks := .tracks.title, \
};"

# View people in the database.
@people:
    {{edgedb_command}} query "{{select_person}}" | {{jq}}

# View a person in the database.
@person full_name:
    {{edgedb_command}} query \
        "{{select_person}} filter .full_name ilike '%{{full_name}}%'" \
        | {{jq}}

select_instrument := "\
select Instrument { \
    name, \
    instrument_players := .players.person.full_name \
};"

# View instruments in the database.
@instruments:
    {{edgedb_command}} query "{{select_instrument}}" | {{jq}}

# View an instrument in the database.
@instrument name:
    {{edgedb_command}} query \
        "{{select_instrument}} filter .name ilike '%{{name}}%'" \
        | {{jq}}

select_composition := "\
select Composition { \
    title, \
    date := .date_composed.local_date, \
    creators := .composers.full_name, \
    instruments := .instrumentation.name, \
};"

# View compositions in the database.
@compositions:
    {{edgedb_command}} query \
        "{{select_composition}}" \
        | {{jq}}

# View a composition in the database.
@composition title:
    {{edgedb_command}} query \
        "{{select_composition}} filter .title ilike '%{{title}}%'" \
        | {{jq}}

select_player := "\
select Player { \
    instrument_played := .instrument.name, \
    performer := .person.full_name, \
};"

# View players in the database.
@players:
    {{edgedb_command}} query \
        "{{select_player}}" \
        | {{jq}}

# View a player in the database.
@player name:
    {{edgedb_command}} query \
        "{{select_player}} filter .person.full_name ilike '%{{name}}%'" \
        | {{jq}}

select_artist := "\
select Artist { \
    name, \
    people := .members.full_name, \
    albums_made := .albums.title, \
};"

# View artists in the database.
@artists:
    {{edgedb_command}} query "{{select_artist}}" | {{jq}}

# View an artist in the database.
@artist name:
    {{edgedb_command}} query \
        "{{select_artist}} filter .name ilike '%{{name}}%'" \
        | {{jq}}

select_track := "\
select Track { \
    title, \
    duration, \
    number, \
    people := .players.display, \
    track_date_recorded := .date_recorded.local_date, \
};"

# View tracks in the database.
@tracks:
    {{edgedb_command}} query "{{select_track}}" | {{jq}}

# View a track in the database.
@track title:
    {{edgedb_command}} query \
        "{{select_track}} filter .title ilike '%{{title}}%'" \
        | {{jq}}

select_label := "\
select Label { \
    name, \
    label_series := .series.name, \
    label_albums := .albums.title, \
    label_artists := .artists.name \
};"

# View labels in the database.
@labels:
    {{edgedb_command}} query "{{select_label}}" | {{jq}}

# View a label in the database.
@label name:
    {{edgedb_command}} query \
        "{{select_label}} filter .name ilike '%{{name}}%'" \
        | {{jq}}

select_series := "\
select Series { \
    name, \
    series_label := .label.name, \
    series_albums := .albums.title, \
};"

# View series in the database.
@series:
    {{edgedb_command}} query "{{select_series}}" | {{jq}}

# View a series in the database.
@series-single name:
    {{edgedb_command}} query \
        "{{select_series}} filter .name ilike '%{{name}}%'" \
        | {{jq}}

select_disc := "\
select Disc { \
    title, \
    tracks: { title, duration, number} order by .number, \
    duration, \
};"

# View discs in the database.
@discs:
    {{edgedb_command}} query "{{select_disc}}" | {{jq}}

# View a disc in the database.
@disc title:
    {{edgedb_command}} query \
        "{{select_disc}} filter .title ilike '%{{title}}%'" \
        | {{jq}}

select_album := "\
select Album { \
    title, \
    album_artists := .artists.name, \
    disc_total, \
    album_tracks := .tracks.title, \
    duration, \
    album_label := .label.name, \
    producer := .producers.full_name, \
    catalog_number, \
    series_name := .series.name, \
    series_number, \
};"

# View albums in the database.
@albums:
    {{edgedb_command}} query "{{select_album}}" | {{jq}}

# View an album in the database.
@album title:
    {{edgedb_command}} query \
        "{{select_album}} filter .title ilike '%{{title}}%'" \
        | {{jq}}
