set fallback

_help *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        just --list
    else
        just --list --list-heading $'\nDB: [`just db <COMMAND>`]\n'
    fi

# Install dependencies.
install *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        ../install_dependencies.sh --db
    fi

image := "mishpocha-db"
instance := replace(image, "-", "_")
edgedb_instance := "edgedb --instance " + instance

_create:
    #!/usr/bin/env zsh
    if ! edgedb instance list | grep -q {{instance}}; then
        edgedb instance create {{instance}}
        {{edgedb_instance}} migrate
    fi

config := "edgedb-config"

# Show the DSN for the database.
dsn: _create
    #!/usr/bin/env zsh
    if [ -n "$(just running)" ]; then
        base_dsn=$(
            docker run \
                --interactive \
                --link {{image}} \
                --net default \
                --rm \
                --tty \
                --volume {{config}}:/.config/edgedb \
                edgedb/edgedb-cli \
                    instance credentials \
                        --insecure-dsn \
                        --instance {{instance}}
        )
    else
        base_dsn=$(
            {{edgedb_instance}} instance credentials \
                --insecure-dsn
        )
    echo "${base_dsn}&tls_security=insecure"
    fi

# Connect to the database locally, optionally via the edgedb "--ui".
local *ui: _create
    #!/usr/bin/env zsh
    if [ "{{ui}}" = "--ui" ]; then
        {{edgedb_instance}} ui
    else
        {{edgedb_instance}}
    fi

# Migrate the database.
migrate: _create
    #!/usr/bin/env zsh
    {{edgedb_instance}} migration create
    {{edgedb_instance}} migrate

# Show if the container is running.
running:
    #!/usr/bin/env zsh
    if ps | grep docker | grep -v grep; then
        docker container ls --filter name={{image}}
    fi

_build:
    #!/usr/bin/env zsh
    if [ -z "$(just running)" ]; then \
        docker build --tag {{image}} .
    fi

port := "5656"

# Open the application in the browser.
@open:
    open "http://localhost:{{port}}/ui"

@_link:
    docker run \
        --interactive \
        --link {{image}} \
        --rm \
        --tty \
        --volume {{config}}:/.config/edgedb \
        edgedb/edgedb-cli \
            --host {{image}} \
            instance link {{instance}} \
                --non-interactive \
                --trust-tls-cert \
                --overwrite

data := "db-config"

# Run the Docker container.
@start *open: stop _build
    docker run \
        --detach \
        --env EDGEDB_SERVER_SECURITY=insecure_dev_mode \
        --env EDGEDB_SERVER_ADMIN_UI=enabled \
        --name {{image}} \
        --publish {{port}}:{{port}} \
        --rm \
        --volume {{data}}:/var/lib/edgedb/data \
        {{image}}
    just _link
    {{ if open =~ "--open" { "just open" } else { "" } }}

# Stop the Docker container.
stop:
    #!/usr/bin/env zsh
    if [ -n "$(just running)" ]; then
        docker kill {{image}}
        if docker volume list | grep -q {{config}}; then
            docker volume remove {{config}}
        fi
    fi

# Remove the Docker image.
clean:
    #!/usr/bin/env zsh
    docker rmi {{image}} >/dev/null 2>&1
    exit 0

# Show the Docker logs.
logs tail="20":
    #!/usr/bin/env zsh
    if [ -n "$(just running)" ]; then
        docker logs {{image}} --tail {{tail}}
    fi

# Log into the interactive shell in Docker.
shell:
    #!/usr/bin/env zsh
    if [ -z "$(just running)" ]; then
        just start
    fi
    docker run \
        --interactive \
        --link {{image}} \
        --rm \
        --tty \
        --volume {{config}}:/.config/edgedb \
        edgedb/edgedb-cli \
            --instance {{instance}}

# Drop the persisted databases or only in "--docker", or "--local".
drop *args: stop
    #!/usr/bin/env zsh
    if [ "{{args}}" = "--local" ] || [ -z "{{args}}" ]; then
        edgedb instance destroy \
            --instance {{instance}} \
            --force \
            >/dev/null 2>&1
    fi
    if [ "{{args}}" = "--docker" ] || [ -z "{{args}}" ]; then
        volumes=("$(docker volume list --quiet --filter name={{data}})")
        if [ -n "${volumes}" ]; then
            for volume in "${volumes}"; do
                docker volume remove "${volume}"
            done
        fi
    fi

# Delete all objects in the database.
@delete:
    {{edgedb_instance}} query \
        "delete Album; \
        delete Disc; \
        delete Track; \
        delete Player; \
        delete Artist; \
        delete Person; \
        delete Composition; \
        delete Label; \
        delete Date; \
        delete Instrument;" \
        | {{jq}}

# Seed the database.
@seed:
    {{edgedb_instance}} query --file seed.edgeql

bat := "bat --style plain --language json --theme gruvbox-dark"
jq := "jq | " + bat

# View dates in the database.
@dates:
    {{edgedb_instance}} query \
        "select Date { local_date, birthdays := .births.full_name };" \
        | {{jq}}

# View a date in the database.
@date display:
    {{edgedb_instance}} query \
        "select Date { \
            local_date, \
            birthdays := .births.full_name \
        } filter .display ilike '%{{display}}%'" \
        | {{jq}}

# View people in the database.
@people:
    {{edgedb_instance}} query \
        "select Person { \
            is_alive, \
            full_name, \
            age, \
            birthday := .birth_date.local_date, \
            groups_in := .groups.name, \
            compositions_written := .compositions.title, \
            instruments_played := .instruments.name, \
            tracks_recorded := .tracks.title, \
        };" \
        | {{jq}}

# View a person in the database.
@person full_name:
    {{edgedb_instance}} query \
        "select Person { \
            is_alive, \
            full_name, \
            age, \
            birthday := .birth_date.local_date, \
            groups_in := .groups.name, \
            compositions_written := .compositions.title, \
            instruments_played := .instruments.name, \
            tracks_recorded := .tracks.title, \
        } filter .full_name ilike '%{{full_name}}%'" \
        | {{jq}}

# View instruments in the database.
@instruments:
    {{edgedb_instance}} query \
        "select Instrument { \
            name, \
            people_playing := .players.person.full_name \
        };" \
        | {{jq}}

# View an instrument in the database.
@instrument name:
    {{edgedb_instance}} query \
        "select Instrument { \
            name, \
            people_playing := .players.person.full_name \
        } filter .name ilike '%{{name}}%'" \
        | {{jq}}

# View compositions in the database.
@compositions:
    {{edgedb_instance}} query \
        "select Composition { \
            title, \
            date := .date_composed.local_date, \
            creators := .composers.full_name, \
            instruments := .instrumentation.name, \
        };" \
        | {{jq}}

# View a composition in the database.
@composition title:
    {{edgedb_instance}} query \
        "select Composition { \
            title, \
            date := .date_composed.local_date, \
            creators := .composers.full_name, \
            instruments := .instrumentation.name, \
        } filter .title ilike '%{{title}}%'" \
        | {{jq}}

# View players in the database.
@players:
    {{edgedb_instance}} query \
        "select Player { \
            instrument_played := .instrument.name, \
            performer := .person.full_name, \
        };" \
        | {{jq}}

# View a player in the database.
@player name:
    {{edgedb_instance}} query \
        "select Player { \
            instrument_played := .instrument.name, \
            performer := .person.full_name, \
        } filter .person.full_name ilike '%{{name}}%'" \
        | {{jq}}

# View artists in the database.
@artists:
    {{edgedb_instance}} query \
        "select Artist { \
            name, \
            people := .members.full_name, \
            albums_made := .albums.title, \
        };" \
        | {{jq}}

# View an artist in the database.
@artist name:
    {{edgedb_instance}} query \
        "select Artist { \
            name, \
            people := .members.full_name, \
            albums_made := .albums.title, \
        } filter .name ilike '%{{name}}%'" \
        | {{jq}}

# View tracks in the database.
@tracks:
    {{edgedb_instance}} query \
        "select Track { \
            title, \
            duration, \
            number, \
            people := .players.display, \
            date_recorded, \
        };" | {{jq}}

# View a track in the database.
@track title:
    {{edgedb_instance}} query \
        "select Track { \
            title, \
            duration, \
            number, \
            people := .players.display, \
            date_recorded, \
        } filter .title ilike '%{{title}}%'" \
        | {{jq}}

# View labels in the database.
@labels:
    {{edgedb_instance}} query \
        "select Label { \
            name, \
            albums_released := .albums.title, \
            artists_recorded := .artists.name \
            };" \
        | {{jq}}

# View a label in the database.
@label name:
    {{edgedb_instance}} query \
        "select Label { \
            name, \
            albums_released := .albums.title, \
            artists_recorded := .artists.name \
        } filter .name ilike '%{{name}}%'" \
        | {{jq}}

# View discs in the database.
@discs:
    {{edgedb_instance}} query \
        "select Disc { \
            title, \
            duration, \
            tracks: { title, duration, number}, \
            album_title := .album.title, \
        };" \
        | {{jq}}

# View a disc in the database.
@disc title:
    {{edgedb_instance}} query \
        "select Disc { \
            title, \
            duration, \
            tracks: { title, duration, number}, \
            album_title := .album.title, \
        } filter .title ilike '%{{title}}%'" \
        | {{jq}}

# View albums in the database.
@albums:
    {{edgedb_instance}} query \
        "select Album { \
            title, \
            disc_total, \
            series_number, \
            duration, \
            producer := .producers.full_name, \
            artist := .artists.name, \
            record_label := .label.name, \
            tracklisting := .tracks.title, \
        };" \
        | {{jq}}

# View an album in the database.
@album title:
    {{edgedb_instance}} query \
        "select Album { \
            title, \
            disc_total, \
            series_number, \
            duration, \
            producer := .producers.full_name, \
            artist := .artists.name, \
            record_label := .label.name, \
            tracklisting := .tracks.title, \
        } filter .title ilike '%{{title}}%'" \
        | {{jq}}
