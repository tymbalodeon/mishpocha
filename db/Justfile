set fallback

_help *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        just --list
    else
        just --list --list-heading $'\nDB: [`just db <COMMAND>`]\n'
    fi

# Install dependencies.
install *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        ../install_dependencies.sh --db
    fi

image := "mishpocha-db"
instance := replace(image, "-", "_")
edgedb_instance := "edgedb --instance " + instance

_create:
    #!/usr/bin/env zsh
    if ! edgedb instance list | grep -q {{instance}}; then
        edgedb instance create {{instance}}
        {{edgedb_instance}} migrate
    fi

config := "edgedb-config"

# Show the DSN for the database.
dsn: _create
    #!/usr/bin/env zsh
    if [ -n "$(just running)" ]; then
        base_dsn=$(
            docker run \
                --interactive \
                --link {{image}} \
                --net default \
                --rm \
                --tty \
                --volume {{config}}:/.config/edgedb \
                edgedb/edgedb-cli \
                    instance credentials \
                        --insecure-dsn \
                        --instance {{instance}}
        )
    else
        base_dsn=$(
            {{edgedb_instance}} instance credentials \
                --insecure-dsn
        )
    echo "${base_dsn}&tls_security=insecure"
    fi

# Connect to the database locally, optionally via the edgedb "--ui".
local *ui: _create
    #!/usr/bin/env zsh
    if [ "{{ui}}" = "--ui" ]; then
        {{edgedb_instance}} ui
    else
        {{edgedb_instance}}
    fi

# Migrate the database.
migrate: _create
    #!/usr/bin/env zsh
    {{edgedb_instance}} migration create --squash
    {{edgedb_instance}} migrate

# Show if the container is running.
running:
    #!/usr/bin/env zsh
    if ps | grep docker | grep -v grep; then
        docker container ls --filter name={{image}}
    fi

_build:
    #!/usr/bin/env zsh
    if [ -z "$(just running)" ]; then \
        docker build --tag {{image}} .
    fi

port := "5656"

# Open the application in the browser.
@open:
    open "http://localhost:{{port}}/ui"

@_link:
    docker run \
        --interactive \
        --link {{image}} \
        --rm \
        --tty \
        --volume {{config}}:/.config/edgedb \
        edgedb/edgedb-cli \
            --host {{image}} \
            instance link {{instance}} \
                --non-interactive \
                --trust-tls-cert \
                --overwrite

data := "db-config"

# Run the Docker container.
@start *open: stop _build
    docker run \
        --detach \
        --env EDGEDB_SERVER_SECURITY=insecure_dev_mode \
        --env EDGEDB_SERVER_ADMIN_UI=enabled \
        --name {{image}} \
        --publish {{port}}:{{port}} \
        --rm \
        --volume {{data}}:/var/lib/edgedb/data \
        {{image}}
    just _link
    {{ if open =~ "--open" { "just open" } else { "" } }}

# Stop the Docker container.
stop:
    #!/usr/bin/env zsh
    if [ -n "$(just running)" ]; then
        docker kill {{image}}
        if docker volume list | grep -q {{config}}; then
            docker volume remove {{config}}
        fi
    fi

# Remove the Docker image.
clean:
    #!/usr/bin/env zsh
    docker rmi {{image}} >/dev/null 2>&1
    exit 0

# Show the Docker logs.
logs tail="20":
    #!/usr/bin/env zsh
    if [ -n "$(just running)" ]; then
        docker logs {{image}} --tail {{tail}}
    fi

# Log into the interactive shell in Docker.
shell:
    #!/usr/bin/env zsh
    if [ -z "$(just running)" ]; then
        just start
    fi
    docker run \
        --interactive \
        --link {{image}} \
        --rm \
        --tty \
        --volume {{config}}:/.config/edgedb \
        edgedb/edgedb-cli \
            --instance {{instance}}

# Drop the persisted databases or only in "--docker", or "--local".
drop *args: stop
    #!/usr/bin/env zsh
    if [ "{{args}}" = "--local" ] || [ -z "{{args}}" ]; then
        {{edgedb_instance}} instance destroy --force >/dev/null 2>&1
    fi
    if [ "{{args}}" = "--docker" ] || [ -z "{{args}}" ]; then
        volumes=("$(docker volume list --quiet --filter name={{data}})")
        if [ -n "${volumes}" ]; then
            for volume in "${volumes}"; do
                docker volume remove "${volume}"
            done
        fi
    fi

# Seed the database.
@seed:
    {{edgedb_instance}} query --file seed.edgeql

bat := "bat --style plain --language json --theme gruvbox-dark"
jq := "jq | " + bat

# View dates in the database.
@dates:
    {{edgedb_instance}} query "select Date { ** };" | {{jq}}

# View people in the database.
@people:
    {{edgedb_instance}} query "select Person { ** };" | {{jq}}

# View instruments in the database.
@instruments:
    {{edgedb_instance}} query "select Instrument { ** };" | {{jq}}

# View players in the database.
@players:
    {{edgedb_instance}} query "select Player { ** };" | {{jq}}

# View tracks in the database.
@tracks:
    {{edgedb_instance}} query "select Track { ** };" | {{jq}}

# View a date in the database.
@date display :
    {{edgedb_instance}} query \
        "select Date { ** } filter .display = '{{display}}'" \
        | {{jq}}

# View a person in the database.
@person full_name:
    {{edgedb_instance}} query \
        "select Person { ** } filter .full_name = '{{full_name}}'" \
        | {{jq}}

# View an instrument in the database.
@instrument name:
    {{edgedb_instance}} query \
        "select Instrument { ** } filter .name = '{{name}}'" \
        | {{jq}}

# View a player in the database.
@player name:
    {{edgedb_instance}} query \
        "select Player { ** } filter .person.full_name = '{{name}}'" \
        | {{jq}}

# View a track in the database.
@track title:
    {{edgedb_instance}} query \
        "select Track { \
            **, \
            players: { \
                person: { \
                    full_name \
                }, \
                instrument: { \
                    name \
                } \
            } \
        } \
        filter .title = '{{title}}'" \
        | {{jq}}
