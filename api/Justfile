!include ../helpers.just

set dotenv-load
set fallback

image := "mishpocha-api"
port := "8000"
url := "http://localhost:" + port

_help *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        {{just}} --list
    else
        {{just}} --list --list-heading $'\nAPI: [`{{just}} api <COMMAND>`]\n'
    fi

# Install dependencies.
install *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        ../install_dependencies.sh --api
    fi
    cargo build

# Update dependencies.
update *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        ../install_dependencies.sh --api --update
    fi
    cargo update

# Check code for errors.
@check:
    cargo check

# Format code.
@format:
    cargo fmt

# Add dependencies.
@add *packages:
    cargo add {{packages}}

# Remove dependencies.
@remove *packages:
    cargo remove {{packages}}

# List dependencies.
@list:
    cargo tree --depth 1

_get_instance *instance:
    #!/usr/bin/env zsh
    if [ -n "$(pgrep docker -q)" ] && [ -z "{{instance}}" ] \
        || [[ "{{instance}}" = *"--docker"* ]]; then
        echo "--docker"
    elif [[ "{{instance}}" = *"--cloud"* ]]; then
        echo "--cloud"
    else
        echo "--local"
    fi

[no-exit-message]
_link_cloud:
    #!/usr/bin/env zsh
    {{just}} db _link_cloud --api \
    && echo EDGEDB_SECRET_KEY=$(
        edgedb cloud secretkey create \
            --name api \
            --expires never \
            --inherit-scopes \
            --non-interactive
    ) > .env

_build *prod:
    #!/usr/bin/env zsh
    if pgrep -q docker; then
        target={{ if prod =~ "--prod" { "prod" } else { "dev" } }}
        docker build --target "${target}" --tag {{image}} .
    fi

# Run the application (optional: "--docker", "--local", "--prod", "--open").
start *args: stop (_build args)
    #!/usr/bin/env zsh
    instance="$({{just}} _get_instance {{args}})"
    {{ if args =~ "--open" { just + " open" } else { "" } }}
    if [ "${instance}" = "--docker" ]; then
        if [ -z "$({{just}} running)" ]; then
            {{check_if_docker_running}}
        fi
        if [[ "{{args}}" = *"--prod"* ]]; then
            docker run \
                --detach \
                --name {{image}} \
                --publish {{port}}:{{port}} \
                --rm \
                {{image}}
        else
            docker run \
                --detach \
                --name {{image}} \
                --publish {{port}}:{{port}} \
                --rm \
                {{image}}
        fi
    else
        {{just}} _link_cloud &>/dev/null
        export EDGEDB_DSN="$({{just}} db dsn ${instance})"
        export EDGEDB_CLIENT_TLS_SECURITY="insecure"
        cargo run
    fi

# Stop the server.
stop:
    #!/usr/bin/env zsh
    process="$(pgrep -f {{image}})"
    if [ -n "${process}" ]; then
        kill "${process}"
    fi
    if [ -n "$({{just}} running)" ]; then
        docker kill {{image}}
    fi

# Remove the Docker image.
[no-exit-message]
clean:
    #!/usr/bin/env zsh
    if pgrep -q docker; then
        docker rmi {{image}} >/dev/null 2>&1
    fi

# Show the container id (or all info with "--verbose") if the container is running.
running *verbose:
    #!/usr/bin/env zsh
    if pgrep -q docker; then
        docker container ls \
            {{ if verbose =~ "--verbose" { "" } else { "--quiet" } }} \
            --filter name={{image}}
    fi

# Show the Docker logs up to <lines> lines.
logs lines="20":
    #!/usr/bin/env zsh
    if [ -n "$({{just}} running)" ]; then
        docker logs {{image}} --tail {{lines}}
    fi

# Log into the interactive shell in Docker.
shell:
    #!/usr/bin/env zsh
    {{check_if_docker_running}}
    if [ -n "$({{just}} running)" ]; then
        {{just}} start
    fi
    docker exec --interactive --tty {{image}} bash

# Open the application in the browser.
open *shuttle:
    #!/usr/bin/env zsh
    if [[ "{{shuttle}}" = *"--shuttle"* ]]; then
        open https://mishpocha-api.shuttleapp.rs/
    else
        open {{url}}
    fi

# Ping the application.
@ping:
    http get {{url}}

# View people in the database.
@people:
    http {{url}}/people

# View a person in the database.
@person full_name:
    http "{{url}}/person?full_name={{full_name}}"
