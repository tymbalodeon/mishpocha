!include ../helpers.just

set fallback

cargo_run_with_db := '\
env EDGEDB_DSN="${EDGEDB_DSN}" \
    EDGEDB_CLIENT_TLS_SECURITY="insecure" \
    cargo run'
image := "mishpocha-api"
port := "8080"
url := "http://localhost:" + port

_help *_from-main:
    #!/usr/bin/env zsh
    if [ -z "{{_from-main}}" ]; then
        {{just}} --list
    else
        {{just}} --list --list-heading $'\nAPI: [`just api <COMMAND>`]\n'
    fi

# Install dependencies.
@install:
    ../install_dependencies.sh --api
    cargo build

# Update dependencies.
@update *_from-main:
    ../install_dependencies.sh --api --update
    cargo update

_get_instance *instance:
    #!/usr/bin/env zsh
    if [ -n "$(pgrep docker -q)" ] && [ -z "{{instance}}" ] \
        || [[ "{{instance}}" = *"--docker"* ]]; then
        echo "docker"
    else
        echo "local"
    fi

_build *prod:
    #!/usr/bin/env zsh
    if pgrep -q docker; then
        target={{ if prod =~ "--prod" { "prod" } else { "dev" } }}
        docker build --target "${target}" --tag {{image}} .
    fi

# Remove the Docker image.
[no-exit-message]
@clean:
    docker rmi {{image}} >/dev/null 2>&1

# Run the Docker container, optionally in "--prod", and optionally "--open" in the browser.
start *args: stop (_build args)
    #!/usr/bin/env zsh
    if [[ "{{args}}" = *"--docker"* ]]; then
        instance="--docker"
    elif [[ "{{args}}" = *"--local"* ]]; then
        instance="local"
    else
        instance=""
    fi
    instance="$({{just}} _get_instance ${instance})"
    {{ if args =~ "--open" { just + " open" } else { "" } }}
    if [ "${instance}" = "docker" ]; then
        if [ -z "$({{just}} running)" ]; then
            {{check_if_docker_running}}
        fi
        if [[ "{{args}}" = *"--prod"* ]]; then
            docker run \
                --detach \
                --name {{image}} \
                --publish {{port}}:{{port}} \
                --rm \
                {{image}}
        else
            docker run \
                --detach \
                --name {{image}} \
                --publish {{port}}:{{port}} \
                --rm \
                {{image}}
        fi
    else
        EDGEDB_DSN="$({{just}} db dsn)"
        {{cargo_run_with_db}}
    fi

# Stop the server.
stop:
    #!/usr/bin/env zsh
    if [ -n "$({{just}} running)" ]; then
        docker kill {{image}}
    fi

# Show the container id (or all info with "--verbose") if the container is running.
running *verbose:
    #!/usr/bin/env zsh
    if pgrep -q docker; then
        docker container ls \
            {{ if verbose =~ "--verbose" { "" } else { "--quiet" } }} \
            --filter name={{image}}
    fi

# Show the Docker logs up to <lines> lines.
logs tail="20":
    #!/usr/bin/env zsh
    if [ -n "$({{just}} running)" ]; then
        docker logs {{image}} --tail {{tail}}
    fi

# Log into the interactive shell in Docker.
shell:
    #!/usr/bin/env zsh
    {{check_if_docker_running}}
    if [ -n "$({{just}} running)" ]; then
        {{just}} start
    fi
    docker exec --interactive --tty {{image}} bash

# Open the application in the browser.
@open:
    open {{url}}

# Ping the application.
@ping:
    http get {{url}}

# View people in the database.
@people:
    http {{url}}/people

# View a person in the database.
@person full_name:
    http "{{url}}/person?full_name={{full_name}}"
